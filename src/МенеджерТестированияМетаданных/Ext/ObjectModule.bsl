#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция Тестировать() Экспорт
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ОписаниеОтчета", НовыйОписаниеОтчета());
	
	Результат = ТестироватьНовыеМетаданные();
	
	//NOTE: тестирование конфигурации
	AreEqual(Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.ИспользоватьСПредупреждениями, Метаданные.РежимИспользованияМодальности, нСтр("ru = 'Режим использования модальности'"));
	AreEqual(РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение, Метаданные.ОсновнойРежимЗапуска, нСтр("ru = 'Режим запуска приложения'"));			
	AreEqual("2.1.14.8",Метаданные.Версия,нСтр("ru = 'Различаются версии метаданных'"));			
	
КонецФункции //Тестировать
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТестироватьНовыеМетаданные()
	
	слм_Новые = ДобавленныеПодсистемы();
	
	//NOTE: Справочники
	Для каждого мСправочник Из Метаданные.Справочники Цикл
		
		Если ЭтоДобавленныйОбъект(мСправочник) Тогда

			ПроверитьНаВхождениеВПодсистему(слм_Новые, мСправочник);			
			ПроверитьНаЗаполненностьКомментария(мСправочник);			
			ПроверитьЧтоСинонимБезПрефикса(мСправочник);					
			
		КонецЕсли; 
		
	КонецЦикла;
	
	//NOTE: Документы
	Для каждого мДокумент Из Метаданные.Документы Цикл
	
		Если ЭтоДобавленныйОбъект(мДокумент) Тогда
			
			ПроверитьНаВхождениеВПодсистему(слм_Новые, мДокумент);			
			ПроверитьНаЗаполненностьКомментария(мДокумент);
			ПроверитьЧтоПериодичностьУстановлена(мДокумент);
			ПроверитьЧтоСинонимБезПрефикса(мДокумент);
			
		КонецЕсли;                                          		
		
		//AreEqual(Метаданные.РежимУправленияБлокировкойДанных, 
		//		мДокумент.РежимУправленияБлокировкойДанных,мДокумент.ПолноеИмя());
		
		
	КонецЦикла; 
	
	//NOTE: РегистрыСведений
	Для каждого мРегистрСведений Из Метаданные.РегистрыСведений Цикл
		
		Если ЭтоДобавленныйОбъект(мРегистрСведений) Тогда
			
			ПроверитьНаВхождениеВПодсистему(слм_Новые, мРегистрСведений);			
			ПроверитьНаЗаполненностьКомментария(мРегистрСведений);
			ПроверитьЧтоСинонимБезПрефикса(мРегистрСведений);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//NOTE: РегистрыНакопления
	Для каждого мРегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		
		Если ЭтоДобавленныйОбъект(мРегистрНакопления) Тогда
			
			ПроверитьНаВхождениеВПодсистему(слм_Новые, мРегистрНакопления);			
			ПроверитьНаЗаполненностьКомментария(мРегистрНакопления);
			ПроверитьЧтоСинонимБезПрефикса(мРегистрНакопления);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого мОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
		
		Если ЭтоДобавленныйОбъект(мОбщийМодуль) Тогда
						
			ПроверитьНаВхождениеВПодсистему(слм_Новые, мОбщийМодуль);			
			ПроверитьНаЗаполненностьКомментария(мОбщийМодуль);
			ПроверитьЧтоСинонимБезПрефикса(мОбщийМодуль);
			
		КонецЕсли; 		
	КонецЦикла; 
	
КонецФункции

Функция ЭтоДобавленныйОбъект(Знач ОбъектМетаданных)
	
	Возврат СтрНайти(НРег(ОбъектМетаданных.ПолноеИмя()),ПрефиксВНижнемРегистре(),НаправлениеПоиска.СНачала) > 0;

КонецФункции

Функция ПрефиксВНижнемРегистре()
	Возврат НРег("слм_");
КонецФункции //ПрефиксВНижнемРегистре

Функция ДобавленныеПодсистемы()
	
	ДобавленныеПодсистемы = Новый Массив;
	ДобавленныеПодсистемы.Добавить(Метаданные.Подсистемы.слм_Измененнные);
	ДобавленныеПодсистемы.Добавить(Метаданные.Подсистемы.слм_Новые);
	ДобавленныеПодсистемы.Добавить(Метаданные.Подсистемы.слм_ПодсистемаРазработки);
	ДобавленныеПодсистемы.Добавить(Метаданные.Подсистемы.слм_УправленческийУчет);
	ДобавленныеПодсистемы.Добавить(Метаданные.Подсистемы.слм_ПланированиеЭфира);
	
	Возврат Новый ФиксированныйМассив(ДобавленныеПодсистемы);
	
КонецФункции //ПодсистемаНовые

Функция ИсключаемыеИзПроверкиМетаданные()
	
	ИсключаемыеМетаданные = Новый Массив;
	ИсключаемыеМетаданные.Добавить(Метаданные.ОбщиеМодули.слм_ОбщегоНазначенияВызовСервера);
	ИсключаемыеМетаданные.Добавить(Метаданные.ОбщиеМодули.слм_ОбщегоНазначенияКлиент);
	
	Возврат Новый ФиксированныйМассив(ИсключаемыеМетаданные);
	
КонецФункции //ИсключаемыеИзПроверкиМетаданные

#КонецОбласти

#Область Проверки

// Выполняет проверку на вхождение объекта метаданных в одну из подсистем
//
// Параметры:
//  ДобавленныеПодсистемы	 - ФиксированныйМассив	 - добавленные подсистемы
//  ОбъектМетаданных		 - ОбъектМетаданных		 - 
//
Процедура ПроверитьНаВхождениеВПодсистему(Знач ДобавленныеПодсистемы, ОбъектМетаданных)
	
	ПрисутствуетВОднойИзПодсистем = Ложь;
	
	Для Сч = 0 По ДобавленныеПодсистемы.ВГраница() Цикл
		
		Если ДобавленныеПодсистемы[Сч].Состав.Содержит(ОбъектМетаданных)  Тогда
			ПрисутствуетВОднойИзПодсистем = Истина;
			Прервать;
		КонецЕсли; 
	
	КонецЦикла; 	
	
	Если Не ПрисутствуетВОднойИзПодсистем 
		И Не ИсключаемыеИзПроверкиМетаданные().Найти(ОбъектМетаданных) <> Неопределено Тогда // проверка что объект исключен
		
		ВызватьИсключение ТекстОбъектНеПодключенКПодсистеме(ОбъектМетаданных.ПолноеИмя());		
		
	КонецЕсли;
	
КонецПроцедуры //ТестироватьНовыеМетаданные

Процедура ПроверитьНаЗаполненностьКомментария(Знач ОбъектМетаданных)
	
	Если (НЕ ЗначениеЗаполнено(ОбъектМетаданных.Комментарий) 
			ИЛИ СтрНайти(ОбъектМетаданных.Комментарий,"#") = 0)
			И Не ИсключаемыеИзПроверкиМетаданные().Найти(ОбъектМетаданных) <> Неопределено Тогда// проверка что объект исключен 		
		
		ВызватьИсключение ТекстНеЗаполненКомментарий(ОбъектМетаданных.ПолноеИмя());
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЧтоПериодичностьУстановлена(Знач ОбъектМетаданных)
	
	Если (ОбъектМетаданных.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический) Тогда
		
		ВызватьИсключение ТекстНеУстановленаПериодичностьДокумента(ОбъектМетаданных.ПолноеИмя(),ОбъектМетаданных.ПериодичностьНомера);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЧтоСинонимБезПрефикса(Знач ОбъектМетаданных)
	
	Если СтрНайти(НРег(ОбъектМетаданных.Синоним),ПрефиксВНижнемРегистре()) > 0 Тогда
		
		//_ДобавитьЗаписьВДокумент(4,ОбъектМетаданных.ПолноеИмя());
		ВызватьИсключение ТекстУстановленПрефиксВСинониме(ОбъектМетаданных.ПолноеИмя());
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПроверок

// Конструктор соответствия, описывающий имена проверок
// 
// Возвращаемое значение:
//   ФиксированноеСоответствие - 
//
Функция НовыйОписаниеПроверок()

	ОписаниеПроверок = Новый Соответствие;
	ОписаниеПроверок.Вставить(1,нСтр("ru = 'Проверка на вхождение в подсистему'"));
	ОписаниеПроверок.Вставить(2,нСтр("ru = 'Проверка на заполненность комментария в метаданных.'"));
	ОписаниеПроверок.Вставить(3,нСтр("ru = 'Проверка на установленную периодичность в документах.'"));
	ОписаниеПроверок.Вставить(4,нСтр("ru = 'Проверка на корректно заполненный синоним метаданных.'"));	
	
	Возврат Новый ФиксированноеСоответствие(ОписаниеПроверок);
	
КонецФункции //НовыйОписаниеПроверок

#КонецОбласти

#Область ДобавлениеВТабличныйДокумент

//TODO: подумать, может складывать результаты в коллекцию, а потом делать постобработку и вывод пользователю...

// Конструктор структуры, создающей описание отчета для вывода информации пользователю
// 
// Возвращаемое значение:
//   - 
//
Функция НовыйОписаниеОтчета()
	
	ОписаниеОтчета = Новый Структура("Отчет, Шапка, СтрокаОшибки, ПустаяСтрока, Заголовок");
	ОписаниеОтчета.Отчет = _ИнициализироватьОтчет();
	ОбластиМакета = _ИнициализироватьОбласти();
	
	ЗаполнитьЗначенияСвойств(ОписаниеОтчета,ОбластиМакета);	
	ОписаниеОтчета.Отчет.Вывести(ОписаниеОтчета.Заголовок);
	ОписаниеОтчета.Отчет.Вывести(ОписаниеОтчета.Шапка);
	
	Возврат ОписаниеОтчета;
	
КонецФункции //НовыйОписаниеОтчета

Функция _ИнициализироватьОтчет()
	
	Возврат Новый ТабличныйДокумент;	
	
КонецФункции //_ИнициализироватьОтчет

Функция _ИнициализироватьОбласти()
	
	ОбластиМакета = Новый Структура("Шапка, СтрокаОшибки, ПустаяСтрока, Заголовок");
	
	Макет = ПолучитьМакет("Макет"); 
	
	Для каждого ЭлементКоллекции Из ОбластиМакета Цикл		
		ОбластиМакета[ЭлементКоллекции.Ключ] = Макет.ПолучитьОбласть(ЭлементКоллекции.Ключ);		
	КонецЦикла; 
	
	Возврат ОбластиМакета;
		
КонецФункции //_ИнициализироватьОбласти

// Добавляет запись в документ
//
// Параметры:
//  _КодОшибки					 - Число -  см.НовыйОписаниеПроверок()
//  ОбъектМетаданныхПолноеИмя	 - Строка	 - 
//  ДополнительныеПараметры		 - Структура - 
//
Процедура _ДобавитьЗаписьВДокумент(Знач _КодОшибки, ОбъектМетаданныхПолноеИмя, ДополнительныеПараметры = Неопределено)

	//NOTE: заполнение макета 	
	СтрокаОшибки = ДополнительныеСвойства.ОписаниеОтчета.СтрокаОшибки;	
	
	СтрокаОшибки.Параметры.ОписаниеПроверки = НовыйОписаниеПроверок()[_КодОшибки];	
	СтрокаОшибки.Параметры.Объекты = ОбъектМетаданныхПолноеИмя;
	
	ДополнительныеСвойства.ОписаниеОтчета.Отчет.Вывести(СтрокаОшибки);
		
КонецПроцедуры

#КонецОбласти

#Область ТекстыСообщений

Функция ТекстОбъектНеПодключенКПодсистеме(Знач ОбъектМетаданныхПолноеИмя)
	
	Возврат СтрШаблон("%1 не подключен ни к одной добавленной подсистеме",ОбъектМетаданныхПолноеИмя) ;	
	
КонецФункции //ТекстОбъектНеПодключенКПодсистеме

Функция ТекстНеЗаполненКомментарий(Знач ОбъектМетаданныхПолноеИмя)
	
	Возврат СтрШаблон("У объекта %1 не заполено поле ""Комментарий"" согласно стандартов разработки",ОбъектМетаданныхПолноеИмя);
	
КонецФункции //ТекстНеЗаполненКомментарий

Функция ТекстНеУстановленаПериодичностьДокумента(Знач ОбъектМетаданныхПолноеИмя, _ПериодичностьНомераДокумента)
	Возврат СтрШаблон("Для документа %1 не установлена периодичность. Установленная периодичность: <%2>", ОбъектМетаданныхПолноеИмя, _ПериодичностьНомераДокумента);	
КонецФункции //ТекстНеУстановленаПериодичностьДокумента

Функция ТекстУстановленПрефиксВСинониме(Знач ОбъектМетаданныхПолноеИмя)
	
	Возврат СтрШаблон("Для %1 в свойстве ""Синоним"" указан префикс %2", ОбъектМетаданныхПолноеИмя, ПрефиксВНижнемРегистре());
	
КонецФункции //ТекстУстановленПрефиксВСинониме

#КонецОбласти


#Область Asserts

//NOTE: https://github.com/zeegin/OpenSubsystemsLibrary

Процедура AreEqual(Expected, Actual, Message = "") 
    
    If Expected <> Actual Then
        Raise AssertError(Expected, Actual, Message);
    EndIf;
    
КонецПроцедуры

Procedure AreNotEqual(NotExpected, Actual, Message = "")
    
    If NotExpected = Actual Then
        Raise AssertError(NotExpected, Actual, Message);
    EndIf;
    
EndProcedure

Procedure IsTrue(Condition, Message = "") Export
    
    If Not Condition Then
        Raise AssertError(True, Condition, Message);
    EndIf;
    
EndProcedure

Procedure IsFalse(Condition, Message = "") Export
    
    If Condition Then
        Raise AssertError(False, Not Condition, Message);
    EndIf;
    
EndProcedure

Procedure IsNotUndefined(Value, Message = "") Export
    
    If Value = Undefined Then
        Raise AssertError(Undefined, Value, Message);
    EndIf;
    
EndProcedure

Procedure IsUndefined(Value, Message = "") Export
    
    If Value <> Undefined Then
        Raise AssertError(Undefined, Value, Message);
    EndIf;
    
EndProcedure

Procedure IsInstanceOfType(ExpectedType, Value, Message = "") Export
    
    If TypeOf(Value) <> Type(ExpectedType) Then
        Raise AssertError(Type(ExpectedType), TypeOf(Value), Message);
    EndIf;
    
EndProcedure

Procedure IsNull(Value, Message = "") Export
    
    If Value <> Null Then
        Raise AssertError(Null, Value, Message);
    EndIf;
    
EndProcedure

Procedure IsNotNull(Value, Message = "") Export
    
    If Value = Null Then
        Raise AssertError(Null, Value, Message);
    EndIf;
    
EndProcedure

Function AssertError(Expected, Actual, Message = "") 
    
    ErrorText = StrTemplate(
        "[AssertError]
        |[Expected]
        |%1
        |[Actual]
        |%2",
        Expected,
        Actual
    );
    
    If Not IsBlankString(Message) Then
        ErrorText = ErrorText + Chars.LF + "[Message]" + Chars.LF + Message;
    EndIf;
    
    Return ErrorText;
    
EndFunction
Function NotImplementedError(Message = "")  
    
    Return "[NotImplementedError]" + Chars.LF + Message;
    
EndFunction
Function TypeError(Message = "") 
    
    Return "[TypeError]" + Chars.LF + Message;
    
EndFunction
Function RuntimeError(Message = "") 
    
    Return "[RuntimeError]" + Chars.LF + Message;
    
EndFunction

#КонецОбласти


#Иначе
 ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли 
